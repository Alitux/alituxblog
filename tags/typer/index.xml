<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Typer on Alitux</title><link>https://alitux.com.ar/tags/typer/</link><description>Recent content in Typer on Alitux</description><generator>Hugo</generator><language>es</language><copyright>Copyleft 2025. Nothing reserved. Feel free to share and share alike.</copyright><lastBuildDate>Sun, 05 Jan 2025 11:19:13 -0300</lastBuildDate><atom:link href="https://alitux.com.ar/tags/typer/index.xml" rel="self" type="application/rss+xml"/><item><title>Conociendo Typer</title><link>https://alitux.com.ar/posts/porque-usar-typer/</link><pubDate>Sun, 05 Jan 2025 11:19:13 -0300</pubDate><guid>https://alitux.com.ar/posts/porque-usar-typer/</guid><description>&lt;p&gt;Cuando se empieza a avanzar en el mundo devops siempre surge la necesidad de automatizar tareas y acá uno puede tirar de bash, de lua, de ruby, etc.
En mi caso, trato de usar Python para casi todo lo que se pueda. Seguramente lo primero que vamos a encontrar es la libreria &lt;a href="https://docs.python.org/3/library/argparse.html"&gt;argparse&lt;/a&gt; que es una de las más usadas en Python. Sin embargo, aunque es muy potente y flexible, deja muchas cuestiones libradas al criterio del desarrollador y carece de una buena forma de hacer validaciones o el código a medida que crece tiende a enredarse un poco. Y aclaro para mi es una excelente opción para hacer un CLI cuando se trata de proyectos simples, pero al día de la fecha lo ideal es algo que nos permita crear y mantener un código limpio, modular y con estándares modernos. Y acá es donde entra Typer.&lt;/p&gt;</description></item></channel></rss>