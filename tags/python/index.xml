<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Alitux</title><link>https://alitux.com.ar/tags/python/</link><description>Recent content in Python on Alitux</description><generator>Hugo</generator><language>es</language><copyright>Copyleft 2025. Nothing reserved. Feel free to share and share alike.</copyright><lastBuildDate>Fri, 05 Sep 2025 10:49:54 -0300</lastBuildDate><atom:link href="https://alitux.com.ar/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Paquetes Python en modo editable</title><link>https://alitux.com.ar/posts/paquete-python-editable/</link><pubDate>Fri, 05 Sep 2025 10:49:54 -0300</pubDate><guid>https://alitux.com.ar/posts/paquete-python-editable/</guid><description>&lt;p&gt;Como algunos ya saben, estoy trabajando en una herramienta que facilitará el despliegue y desarrollo de Odoo. La estoy codeando integramente en Python, valiéndome de Typer y el SDK de Docker. Sin embargo, mi flujo de laburo venía medio trabado en una etapa puntual: Básicamente codeaba, empaquetaba y después testeaba. La etapa de empaquetado me llevaba valiosos segundos, que en sucesivas iteraciones se trasnformaban en minutos. Es por ello que me puse a investigar alguna forma de hacer mas dinámico el desarrollo. Y ahí me encontré con el &lt;a href="https://peps.python.org/pep-0660/"&gt;PEP 660&lt;/a&gt; que permite instalar paquetes en modo editable.&lt;/p&gt;</description></item><item><title>Interactuando con contenedores Docker desde Python</title><link>https://alitux.com.ar/posts/docker-python/</link><pubDate>Tue, 12 Aug 2025 16:17:54 -0300</pubDate><guid>https://alitux.com.ar/posts/docker-python/</guid><description>&lt;p&gt;Estoy trabajando en una herramienta DevOps enfocada al despliegue eficiente y simple de &lt;strong&gt;Odoo&lt;/strong&gt; en producción y desarrollo. Como framework general para interactuar con la misma estoy usando &lt;em&gt;Typer&lt;/em&gt; y mi idea inicial era que python fuera llamando los diferentes comandos necesarios usando una mezcla de subprocess y os. Todo iba muy lindo, pero a medida que el proyecto crecía (y sigue creciendo muchísimo) cai que usar subprocess, por ejemplo, para ejecutar un comando dentro de un contenedor, se hacia bastante engorroso, propenso a errores y además se me complicaba el el post procesamiento de las salidas. Y ahí es cuando me pregunté:
&lt;strong&gt;¿Existirá algo qué me permita interactuar con docker desde Python?&lt;/strong&gt; La respuesta es &lt;strong&gt;SI&lt;/strong&gt; y es el &lt;strong&gt;SDK oficial de Docker para Python&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>Conociendo Typer</title><link>https://alitux.com.ar/posts/porque-usar-typer/</link><pubDate>Sun, 05 Jan 2025 11:19:13 -0300</pubDate><guid>https://alitux.com.ar/posts/porque-usar-typer/</guid><description>&lt;p&gt;Cuando se empieza a avanzar en el mundo devops siempre surge la necesidad de automatizar tareas y acá uno puede tirar de bash, de lua, de ruby, etc.
En mi caso, trato de usar Python para casi todo lo que se pueda. Seguramente lo primero que vamos a encontrar es la libreria &lt;a href="https://docs.python.org/3/library/argparse.html"&gt;argparse&lt;/a&gt; que es una de las más usadas en Python. Sin embargo, aunque es muy potente y flexible, deja muchas cuestiones libradas al criterio del desarrollador y carece de una buena forma de hacer validaciones o el código a medida que crece tiende a enredarse un poco. Y aclaro para mi es una excelente opción para hacer un CLI cuando se trata de proyectos simples, pero al día de la fecha lo ideal es algo que nos permita crear y mantener un código limpio, modular y con estándares modernos. Y acá es donde entra Typer.&lt;/p&gt;</description></item><item><title>Nombres de Usuarios Únicos en Django</title><link>https://alitux.com.ar/posts/usuarios-unicos-django/</link><pubDate>Sat, 13 Jan 2024 11:19:13 -0300</pubDate><guid>https://alitux.com.ar/posts/usuarios-unicos-django/</guid><description>&lt;p&gt;La creación de nombres de usuarios autogenerados en Django no está implementada por defecto. Es por eso que escribí una simple función, que valiéndose de un CustomUser (No uso User por defecto ya que tengo un modelo personalizado que hereda sus propiedades desde AbstractUser) y tomando como entrada el primer nombre genera nombres de usuarios únicos no predecibles. Si bien no evita ataques por fuerza bruta, mitiga el uso de diccionarios con patrones comunes.&lt;/p&gt;</description></item><item><title>Despliegue básico de Django con Docker, Traefik y CloudFlare</title><link>https://alitux.com.ar/posts/despliegue-basico-django-docker-traefik-cloudflare/</link><pubDate>Fri, 08 Dec 2023 11:19:13 -0300</pubDate><guid>https://alitux.com.ar/posts/despliegue-basico-django-docker-traefik-cloudflare/</guid><description>&lt;p&gt;En el momento del despliegue de aplicaciones Django se pueden optar por diversas opciones desde la clásica con una VPS, pasando por Heroku, AWS o bien Docker.&lt;/p&gt;
&lt;p&gt;En esta entrada voy a explicar cual es el método que aplico yo para desplegar una aplicación Django utilizando mi combinación ganadora en una VPS:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Traefik&lt;/li&gt;
&lt;li&gt;CloudFlare&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Es un tutorial que se puede tornar confuso y complejo si no tenés mucha experiencia con el manejo de Docker. Tambien implica tener funcionando correctamente Traefik. En &lt;a href="https://gitlab.com/alitux/portainer-templates/-/blob/master/stacks/traefik/docker-compose.yml"&gt;este enlace&lt;/a&gt; les dejo la configuración que uso yo. Sugiero que lo lean y en todo caso vean como lo adaptan a sus implementaciones.&lt;/p&gt;</description></item><item><title>Cambiar Título del Tab en Odoo 15</title><link>https://alitux.com.ar/posts/cambiar-titulo-tab-odoo15/</link><pubDate>Mon, 27 Nov 2023 12:19:13 -0300</pubDate><guid>https://alitux.com.ar/posts/cambiar-titulo-tab-odoo15/</guid><description>&lt;p&gt;Una cortita: Para cambiar el título «odoo» que aparece en el tab de Odoo y suponiendo que lo están corriendo en Docker, se debe ejecutar dentro del contenedor de Odoo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;sed -i &lt;span class="s1"&gt;&amp;#39;s/zopenerp: &amp;#34;Odoo&amp;#34;/zopenerp: &amp;#34;Tunuevotitulo&amp;#34;/&amp;#39;&lt;/span&gt; /usr/lib/python3/dist-packages/odoo/addons/web/static/src/webclient/webclient.js
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y si no queremos entrar al contenedor podemos hacer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;docker &lt;span class="nb"&gt;exec&lt;/span&gt; -tiu root sed -i &lt;span class="s1"&gt;&amp;#39;s/zopenerp: &amp;#34;Odoo&amp;#34;/zopenerp: &amp;#34;Tunuevotitulo&amp;#34;/&amp;#39;&lt;/span&gt; /usr/lib/python3/dist-packages/odoo/addons/web/static/src/webclient/webclient.js
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;IMPORTANTE0:&lt;/strong&gt; No olvides en reemplazar Tunuevotitulo por el nombre quieras poner.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANTE1:&lt;/strong&gt; El cambio que no es permanente, esto quiere decir que si bajamos el contenedor y lo volvemos a levantar se vuelve todo a cero. Para hacer los cambios permanentes podríamos codear un addon o bien exponer toda la carpeta &lt;em&gt;/usr/lib/python3/dist-packages/odoo/addons/web/static/src/webclient&lt;/em&gt; como un volumen, pero no es una buena práctica y no lo sugiero mas que para safar o fines de desarrollo.&lt;/p&gt;</description></item><item><title>Parsear texto en Python para MarkdownV2 (API Telegram)</title><link>https://alitux.com.ar/posts/parsear-texto-python-markdownv2-telegram/</link><pubDate>Tue, 07 Nov 2023 10:19:13 -0300</pubDate><guid>https://alitux.com.ar/posts/parsear-texto-python-markdownv2-telegram/</guid><description>&lt;p&gt;Supongamos que se tiene el texto:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code class="language-code" data-lang="code"&gt;web#id=28&amp;amp;cids=1&amp;amp;menu_id=281&amp;amp;action=415&amp;amp;model=crm.lead&amp;amp;view_type=form
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Si uno intentara mandar el texto vía la API de Telegram la API respondería:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;#34;ok&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;#34;error_code&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Bad Request: can&amp;#39;t parse entities: Character &amp;#39;#&amp;#39; is reserved and must be escaped with the preceding &amp;#39;\\&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Esto es porque el carácter # es especial y hay que «escaparlo» o decirle a la API que no lo use para formatear texto. Para ello me armé la siguiente función que funciona de primera con todos los caracteres especiales:&lt;/p&gt;</description></item><item><title>Agregar línea con devolución en Odoo 15</title><link>https://alitux.com.ar/posts/linea-con-devolucion-odoo-15/</link><pubDate>Mon, 07 Aug 2023 11:19:13 -0300</pubDate><guid>https://alitux.com.ar/posts/linea-con-devolucion-odoo-15/</guid><description>&lt;p&gt;Estoy armando un módulo que tiene varias funcionalidades, entre ellas, una que debe generar devoluciones masivas en facturas borrador. Les dejo el siguiente Snippet que puede ser útil.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;odoo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;##DATOS INICIALES&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;ID_FACTURA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;ID_PRODUCTO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;#IMPORTANTE: ¡ID DEL PRODUCT.TEMPLATE!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;facturas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;account.move&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;factura&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;facturas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;browse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ID_FACTURA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;productos_t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;product.template&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Crear una línea de factura tipo devolución con descuento&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;linea_factura&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="s1"&gt;&amp;#39;product_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;productos_t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;browse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ID_PRODUCTO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;product_variant_id&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Descuento por ser buena gente&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="s1"&gt;&amp;#39;price_unit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="s1"&gt;&amp;#39;quantity&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;factura&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;invoice_line_ids&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linea_factura&lt;/span&gt;&lt;span class="p"&gt;)]})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Es bien básico, pero hace lo que tiene que hacer. 🙂&lt;/p&gt;</description></item></channel></rss>